{"version":3,"sources":["Scoreboard/Scoreboard.js","Scoreboard/styles.js","serviceWorker.js","index.js"],"names":["unstyledScoreboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeName","e","setState","name","target","value","onChangeImageName","imageName","onSubmit","addedQueryString","state","fetch","then","results","json","jsonResults","newData","entry","data","dateString","Date","moment","format","push","_this2","classes","react_default","a","createElement","className","scoreboard","header","parameters","input","placeholder","onChange","parameterItem","es_button","type","onClick","table","dataSource","columns","title","dataIndex","key","sorter","b","score","footer","Component","Scoreboard","injectSheet","display","flexDirection","justifyContent","padding","marginBottom","marginLeft","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e64ef612.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport injectSheet from \"react-jss\";\nimport moment from \"moment\";\nimport { styles } from \"./styles\";\n\nimport { Input, Button, Table } from \"antd\";\n\nclass unstyledScoreboard extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n      data: [],\n      name: \"\",\n      imageName: \"\"\n    };\n\n  }\n\n  async componentDidMount() {\n\n    fetch(\"http://107.170.200.206/api/user/getScores\")\n      .then((results) => {\n        return results.json();\n      })\n      .then((jsonResults) => {\n        let newData = [];\n\n        for(let entry in jsonResults){\n          let data = jsonResults[entry];\n          data[\"key\"] = entry;\n          const dateString = new Date(data[\"startTime\"]);\n          data[\"startTime\"] = moment(dateString).format('MMMM Do YYYY, h:mm:ss a');\n          newData.push(data);\n        }\n\n        //console.log(newData);\n\n        this.setState({data: jsonResults});\n      });\n\n  }\n\n  onChangeName = (e) => {\n    this.setState({ name: e.target.value });\n  }\n\n  onChangeImageName = (e) => {\n    this.setState({ imageName: e.target.value });\n  }\n\n  onSubmit = (e) => {\n    let addedQueryString = \"?\";\n    if(this.state.name){\n      addedQueryString += \"name=\" + this.state.name + \"&\";\n    }\n    if(this.state.imageName){\n      addedQueryString += \"imageName=\" + this.state.imageName;\n    }\n    fetch(\"http://107.170.200.206/api/user/getScores\" + addedQueryString)\n      .then((results) => {\n        return results.json();\n      })\n      .then((jsonResults) => {\n        let newData = [];\n\n        for(let entry in jsonResults){\n          let data = jsonResults[entry];\n          data[\"key\"] = entry;\n          const dateString = new Date(data[\"startTime\"]);\n          data[\"startTime\"] = moment(dateString).format('MMMM Do YYYY, h:mm:ss a');\n          newData.push(data);\n        }\n\n        //console.log(newData);\n\n        this.setState({data: jsonResults});\n      });\n  }\n\n  render() {\n\n    const { classes } = this.props;\n\n    const columns = [{\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n      sorter: (a, b) => a.name - b.name\n    }, {\n      title: \"Image Name\",\n      dataIndex: \"imageName\",\n      key: \"imageName\",\n      sorter: (a, b) => a.imageName - b.imageName\n    }, {\n      title: \"Score\",\n      dataIndex: \"score\",\n      key: \"score\",\n      sorter: (a, b) => a.score - b.score\n    }, {\n      title: \"Start Time\",\n      dataIndex: \"startTime\",\n      key: \"startTime\"\n    }];\n\n    return (\n      <div className={classes.scoreboard}>\n        <header className=\"scoreboardHeader\">\n          <div className={classes.header}>\n            <h1>Troy High School Cyber Scoreboard</h1>\n          </div>\n        </header>\n        <div className={classes.parameters}>\n          <Input\n            placeholder=\"Enter your name\"\n            value={this.state.name}\n            onChange={this.onChangeName}\n            className={classes.parameterItem}\n          />\n          <Input\n            placeholder=\"Enter the image name\"\n            value={this.state.imageName}\n            onChange={this.onChangeImageName}\n            className={classes.parameterItem}\n          />\n          <Button type=\"primary\" onClick={this.onSubmit} className={classes.parameterItem}>Submit</Button>\n        </div>\n        <Table dataSource={this.state.data} columns={columns}/>\n        <p className={classes.footer}>Scorpio By: Clement Chan, Jimmy Li Ubuntu Scoring By: Christo Bakis Scoreboard By: Jimmy Li</p>\n      </div>\n    );\n  }\n}\n\nexport const Scoreboard = injectSheet(styles)(unstyledScoreboard);","export const styles = {\r\n    scoreboard: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        padding: \"1em\"\r\n    },\r\n    header: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\"\r\n    },\r\n    parameters: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: \"1em\"\r\n    },\r\n    parameterItem: {\r\n        marginLeft: \"1em\",\r\n        marginRight: \"1em\"\r\n    },\r\n    footer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\"\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'\nimport { Scoreboard } from './Scoreboard/Scoreboard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Scoreboard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}